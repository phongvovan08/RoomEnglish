name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '18.x'

jobs:
  # Job 1: Build & Test Backend
  backend-build-test:
    name: Backend Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore src/src.sln
    
    - name: Build
      run: dotnet build src/src.sln --configuration Release --no-restore
    
    - name: Run tests
      run: dotnet test src/src.sln --configuration Release --no-build --verbosity normal
    
    - name: Publish
      run: dotnet publish src/Web/Web.csproj --configuration Release --output ./publish --no-build
    
    - name: Upload backend artifact
      uses: actions/upload-artifact@v4
      with:
        name: backend-build
        path: ./publish
        retention-days: 1

  # Job 2: Build Frontend
  frontend-build:
    name: Frontend Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: src/Web/ClientApp/package-lock.json
    
    - name: Install dependencies
      working-directory: src/Web/ClientApp
      run: npm ci
    
    - name: Lint
      working-directory: src/Web/ClientApp
      run: npm run lint || true
    
    - name: Type check
      working-directory: src/Web/ClientApp
      run: npm run check-type || true
    
    - name: Build
      working-directory: src/Web/ClientApp
      run: npm run build
    
    - name: Upload frontend artifact
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: src/Web/ClientApp/dist
        retention-days: 1

  # Job 3: Deploy to Azure (only on main branch)
  deploy-azure:
    name: Deploy to Azure
    runs-on: ubuntu-latest
    needs: [backend-build-test, frontend-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.webapp-url }}
    
    steps:
    - name: Download backend artifact
      uses: actions/download-artifact@v4
      with:
        name: backend-build
        path: ./publish
    
    - name: Download frontend artifact
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: ./publish/wwwroot
    
    - name: Deploy to Azure Web App
      id: deploy
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: ./publish

  # Job 4: Build & Push Docker Image (optional)
  docker-build-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [backend-build-test, frontend-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: ./src
        file: ./src/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/roomenglish:latest
          ${{ secrets.DOCKER_USERNAME }}/roomenglish:${{ github.sha }}
        cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/roomenglish:latest
        cache-to: type=inline

  # Job 5: Security Scan (optional)
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: './src'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
